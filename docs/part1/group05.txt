--- C:/Users/Rodrigo/SkyDrive/Documentos/Compiladores/projeto1/src/replayer/Main.java	Tue Jun 10 23:59:51 2014
+++ C:/Users/Rodrigo/workspace/Compiladores/src/replayer/Main.java	Tue Jun 10 23:51:14 2014
@@ -58,7 +58,8 @@
     LINENUMBER, IADD, IRETURN, POP, ISUB, IMUL, IDIV, IREM, 
     INEG, IAND, IOR, ISHL, ISHR, IUSHR, IXOR, LCMP, IF, GOTO, 
     FRAME, ANEWARRAY, AASTORE, PUTSTATIC, GETFIELD, AALOAD, SIPUSH,
-    DSTORE, DLOAD, DMUL, DADD, DDIV, DSUB, LOOKUPSWITCH, INVOKEVIRTUAL
+    DSTORE, DLOAD, DMUL, DADD, DDIV, DSUB, LOOKUPSWITCH, INVOKEVIRTUAL, 
+    DREM, DRETURN, DUP_X1, DUP_X2, ldc_w, ldc2_w, ldiv, lload
   };
 
   /**
@@ -492,6 +493,145 @@
         i = lookupForLabel(labels, gotoLabel, i);
         break;
 
+      case DREM:
+        d1 = (Double) operandStack.pop();
+        d2 = (Double) operandStack.pop(); 
+        if(d1==Double.NaN || d2==Double.NaN)
+          res = Double.NaN;
+        else if(Double.isInfinite(d1) || d2 == 0)
+          res = Double.NaN;
+        else if(Double.isInfinite(d2))
+          res = d1;
+        else
+          res = (Double) (d1-(d2*((int)(d1/d2))));
+        operandStack.push(res);
+        break;      
+        
+    case DRETURN:
+    
+        d1 = (Double) operandStack.pop();
+        operandStack = callStack.pop();
+        operandStack.push(d1);
+        break;
+        
+    case DUP_X1:
+    Object operand1 = operandStack.pop();
+    Object operand2 = operandStack.pop();
+    
+    operandStack.push(operand1);
+    operandStack.push(operand2);
+    operandStack.push(operand1);
+    
+    break;
+    
+    case DUP_X2:
+    operand1 = operandStack.pop();
+    operand2 = operandStack.pop();
+    
+    if ((!(operand1 instanceof Double) || !(operand1 instanceof Long)) && ((operand2 instanceof Double) || (operand2 instanceof Long))) {
+      operandStack.push(operand1);
+      operandStack.push(operand2);
+      operandStack.push(operand1);
+    } else {
+      Object operand3 = operandStack.pop();
+      operandStack.push(operand1);
+      operandStack.push(operand3);
+      operandStack.push(operand2);
+      operandStack.push(operand1);
+    }
+    break;    
+    
+    case ldc_w:
+        try {
+          //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+          //int k = Integer.parseInt(complementOne+complementTwo);
+          
+          //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+          //int k = bin2int(complementOne+complementTwo);
+          
+          //se receber ints:
+          int k1 = Integer.parseInt(complementOne);
+          int k2 = Integer.parseInt(complementTwo);
+          int k = k1*(2^8) + k2;
+          //fim
+          
+          operandStack.push(k);
+        } catch(NumberFormatException _) {
+          try {
+            //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+            //Float k = Float.parseFloat(complementOne+complementTwo);
+            
+            //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+            //Float k = bin2float(complementOne+complementTwo);
+            
+            //se receber ints:
+            float k1 = Float.parseFloat(complementOne);
+            float k2 = Float.parseFloat(complementTwo);
+            float k = k1*(2^8) + k2;
+            //fim
+            operandStack.push(k);
+          } catch(NumberFormatException __) {
+            operandStack.push(complementOne+complementTwo);
+          } 
+        }
+        break;
+
+    case ldc2_w:
+        try {
+          //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+          //Long k = Long.parseLong(complementOne+complementTwo);
+          
+          //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+          //Long k = bin2Long(complementOne+complementTwo);
+         
+          //se receber ints:
+          long k1 = Long.parseLong(complementOne);
+          long k2 = Long.parseLong(complementTwo);
+          long k = k1*(2^8) + k2;
+          //fim
+          
+          operandStack.push(k);
+        } catch(NumberFormatException _) {
+          try {
+            //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+            //double k = Double.parseDouble(complementOne+complementTwo);
+            
+            //se receber a cadeia de bits, e o parseInt já transforma em inteiro:
+            //double k = bin2doub(complementOne+complementTwo);
+            
+            //se receber ints:
+            double k1 = Double.parseDouble(complementOne);
+            double k2 = Double.parseDouble(complementTwo);
+            double k = k1*(2^8) + k2;
+            //fim
+            operandStack.push(k);
+          } catch(NumberFormatException __){
+          
+          }
+        }
+        break;
+    
+    case ldiv:
+       long valA = (Long) operandStack.pop();
+       long valB = (Long) operandStack.pop();
+       
+       if(valB==0)
+         throw (new RuntimeException("Arithmetic Exception"));
+       else if(valB==-1 && valA==Long.MAX_VALUE)
+       {
+         operandStack.push(valA);
+       }
+       else
+       {
+         operandStack.push(valA/valB); 
+       }
+        break;    
+    
+    
+    case lload:
+    operandStack.load((int) Long.parseLong(complementOne));
+    break;   
+        
       default:
         throw new RuntimeException("Interpretation of Instruction undefined: " + kind);
       }
