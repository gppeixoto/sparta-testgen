diff --git a/src/replayer/Main.java b/src/replayer/Main.java
index 0d8cf52..9ad3a96 100644
--- a/src/replayer/Main.java
+++ b/src/replayer/Main.java
@@ -58,7 +58,8 @@ public class Main {
     LINENUMBER, IADD, IRETURN, POP, ISUB, IMUL, IDIV, IREM, 
     INEG, IAND, IOR, ISHL, ISHR, IUSHR, IXOR, LCMP, IF, GOTO, 
     FRAME, ANEWARRAY, AASTORE, PUTSTATIC, GETFIELD, AALOAD, SIPUSH,
-    DSTORE, DLOAD, DMUL, DADD, DDIV, DSUB, LOOKUPSWITCH, INVOKEVIRTUAL
+    DSTORE, DLOAD, DMUL, DADD, DDIV, DSUB, LOOKUPSWITCH, INVOKEVIRTUAL,
+    DCMPG, DCMPL, DCONST, DNEG, LAND, LCONST_0, LCONST_1, LASTORE
   };
 
   /**
@@ -164,6 +165,68 @@ public class Main {
        * decide which instruction to apply
        */
       switch (kind) {
+              
+      case LAND:
+        long op1 = (Long) operandStack.pop();
+        long op2 = (Long) operandStack.pop();
+        operandStack.push(op1&op2);
+        break;
+              
+      case LCONST_0:
+        operandStack.push(0);
+        break;
+              
+      case LCONST_1:
+        operandStack.push(1);
+        break;
+              
+      case DCMPG:
+      case DCMPL:
+              
+        double valor1 = (Double) operandStack.pop();
+        double valor2 = (Double) operandStack.pop();
+              
+        switch(kind){
+            case DCMPG:
+                if(valor1 == Double.NaN || valor2 == Double.NaN || valor1 > valor2)
+                    operandStack.push(1);
+                else if(valor1 == valor2)
+                    operandStack.push(0);
+                else
+                    operandStack.push(-1);
+                break;
+            case DCMPL:
+                if(valor1 == Double.NaN || valor2 == Double.NaN || valor1 < valor2)
+                    operandStack.push(-1);
+                else if(valor1 == valor2)
+                    operandStack.push(0);
+                else
+                    operandStack.push(1);
+                break;
+            default:
+                 throw new RuntimeException("Interpretation of Instruction undefined: " + kind);
+        }
+      
+        break;
+              
+      case DCONST:
+        boolean negativo = false;
+        double constante = Double.parseDouble(complementOne);
+        operandStack.push(constante);
+        break;
+              
+      case DNEG:
+        double to_neg = (Double) operandStack.pop();
+        operandStack.push((-1.0)*to_neg);
+        break;
+              
+      case LASTORE:
+        Object value = (Object) operandStack.pop();
+        int idxx = (Integer) operandStack.pop();
+        HeapCell arRefe = (HeapCell) operandStack.pop();
+        arRefe.store(idxx+"",value);
+        break;
+              
 
       case BIPUSH:
         operandStack.push(Integer.parseInt(complementOne));
