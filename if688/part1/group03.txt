diff --git a/src/replayer/Main.java b/src/replayer/Main.java
index 9c57b9e..0d8cf52 100644
--- a/src/replayer/Main.java
+++ b/src/replayer/Main.java
@@ -58,8 +58,7 @@ public class Main {
     LINENUMBER, IADD, IRETURN, POP, ISUB, IMUL, IDIV, IREM, 
     INEG, IAND, IOR, ISHL, ISHR, IUSHR, IXOR, LCMP, IF, GOTO, 
     FRAME, ANEWARRAY, AASTORE, PUTSTATIC, GETFIELD, AALOAD, SIPUSH,
-    DSTORE, DLOAD, DMUL, DADD, DDIV, DSUB, LOOKUPSWITCH, INVOKEVIRTUAL,
-    D2I, D2L, DALOAD, DASTORE, L2F, L2I, LADD, LALOAD
+    DSTORE, DLOAD, DMUL, DADD, DDIV, DSUB, LOOKUPSWITCH, INVOKEVIRTUAL
   };
 
   /**
@@ -207,7 +206,7 @@ public class Main {
       case DUP:
         operandStack.push(operandStack.peek());
         break;
-        
+
       case AASTORE:
       case IASTORE:
         Object val = operandStack.pop();
@@ -222,85 +221,7 @@ public class Main {
         arRef = (HeapCell) operandStack.pop();
         operandStack.push(arRef.load(index+""));
         break;
-      
-      /*begin modified
-       * 
-       * Projeto TILC 2014.1 - Parte 1 - 10/06/2014
-       * Guilherme Peixoto - gpp
-       * Rafael Acevedo - raa7 
-       */
-        
-      case D2I:
-        double var_d2i1 = (Double) operandStack.pop();
-        if (Double.isNaN(var_d2i1)){
-          operandStack.push((Integer) 0);
-        } else if (var_d2i1 == Double.POSITIVE_INFINITY){
-          operandStack.push(Integer.MAX_VALUE);
-        } else if (var_d2i1 == Double.NEGATIVE_INFINITY){
-          operandStack.push(Integer.MIN_VALUE);
-        } else {
-          operandStack.push((var_d2i1 < 0) ? ((int) Math.ceil(var_d2i1)) : ((int) Math.floor(var_d2i1)));
-        }
-        break;
-      
-      case D2L:
-        double var_d2l = (Double) operandStack.pop();
-        if (Double.isNaN(var_d2l)){
-          operandStack.push(new Long(0));
-        } else if (var_d2l == Double.POSITIVE_INFINITY){
-          operandStack.push(Long.MAX_VALUE);
-        } else if (var_d2l == Double.NEGATIVE_INFINITY){
-          operandStack.push(Long.MIN_VALUE);
-        } else {
-          operandStack.push((var_d2l < 0) ? (new Double(Math.ceil(var_d2l)).longValue()) : (new Double(Math.floor(var_d2l))).longValue());
-        }
-        break;
-      
-      case L2F:
-        long var_l2f = (Long) operandStack.pop();
-        operandStack.push((float) var_l2f);
-        break;
-      
-      case L2I:
-        long var_l2i = (Long) operandStack.pop();
-        String str_l2i = Long.toBinaryString(var_l2i);
-        str_l2i = str_l2i.substring(str_l2i.length()-33>=0?str_l2i.length()-33:0);
-        int aux_l2i = 1;
-        int ret_l2i = 0;
-        for (int count=str_l2i.length()-1; count>=0; --count){
-            if (str_l2i.charAt(count) == '1') {
-                ret_l2i += aux_l2i;
-            }
-            aux_l2i *= 2;
-        }
-        operandStack.push(ret_l2i);
-        break;
-        
-      case LALOAD:
-      case DALOAD:
-        index = (Integer) operandStack.pop();
-        arRef = (HeapCell) operandStack.pop();
-        operandStack.push(arRef.load(index+""));
-        break;
-      
-      case DASTORE:
-        val = operandStack.pop();
-        index = (Integer) operandStack.pop();
-        arRef = (HeapCell) operandStack.pop();
-        arRef.store(index+"", val);
-        break;
-        
-      case LADD:
-        long myTmp_ladd;
-        long var_ladd1 = (Long) operandStack.pop();
-        long var_ladd2 = (Long) operandStack.pop();
-        
-        myTmp_ladd = var_ladd1 + var_ladd2;
-        operandStack.push(myTmp_ladd);
-        break;
-        
-      /*end modified
-       */ 
+
       case LDC:
 
         try {
